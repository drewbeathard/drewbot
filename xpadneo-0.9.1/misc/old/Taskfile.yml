# This is a Taskfile, run it via task [target] - exactly as you would expect it with make
# https://github.com/go-task/task

# TODO:
# - hid is not compiled as an module on raspberry pi 3, this is the default - we should offer an udev-rule therefore too


# BUILD FOR LOCAL MACHINE
version: '2'

tasks:
    default:
        cmds:
            - task: local
    
    local:
        desc: builds the modules for the local system
        cmds:
            - task local_main
        env:
            K_VER_LONG:
                sh: uname -r
            K_VER:
                sh: uname -r | sed -E 's/([^-]*)(.*)/\1/'
            K_VER_DL:
                sh: uname -r | sed -E 's/([^-]*)(.*)/\1/' | sed -E 's/(.*)(\.0)/\1/'
            K_VER_LOCAL_EXTRA:
                sh: uname -r | sed -E 's/([^-]*)(.*)/\2/'
            BUILD_DIR: "build/local"
            PATCHES_DIR: "src/patches"
            DL_DIR: "dl"
        
    local_main:
        cmds:
            - task: download
              vars: {LINK: "https://www.kernel.org/pub/linux/kernel/v4.x/linux-{{.K_VER_DL}}.tar.gz"}
            - task: unpack
              vars: {FILE: "dl/linux-{{.K_VER_DL}}.tar.gz", DEST_DIR: "{{.BUILD_DIR}}"}
            - task: copy_driver
            - task: patch_src
            - task: configure_src_from_local
            - task: make_scripts
            - task: try_copy_modulesymvers_linux_headers
            - task: make_modulesymvers_if_not_there
            - task: build_hid
            - task: build_xpad
            - task: build_bluetooth
            - task: backup_modules
              vars: {BCK_DIR: "out/x86_64/{{.K_VER_LONG}}"}
            

    # BUILD FOR RASPBERRY PI 3

    raspi3:
        desc: builds the modules for an raspberry pi 3
        cmds:
            - task raspi3_main
        env:
            ARCH: 'arm'
            CROSS_COMPILE: 'arm-linux-gnueabihf-'
            KERNEL: 'kernel7'
            BUILD_DIR: "build/raspi3"
            PATCHES_DIR: "src/patches"
            DL_DIR: "dl"
            
    raspi3_main:
        cmds:
            - task: download
              vars: {LINK: "http://github.com/raspberrypi/linux/archive/raspberrypi-kernel_1.20180313-1.tar.gz"}
            - task: unpack
              vars: {FILE: "dl/raspberrypi-kernel_1.20180313-1.tar.gz", DEST_DIR: "{{.BUILD_DIR}}"}
            - task: copy_driver
            - task: patch_src
              vars: {PATCHES_DIR: "{{.PATCHES_DIR}}/raspi3"}
            - task: copy_defconfig
              vars: {CONF_ARCH: "arm", CONF_PATH: "src/", CONF_NAME: "bcm2709_defconfig"}         
            - task: make_defconfig
              vars: {DEFCONFIG: "bcm2709_defconfig"}
            - task: patch_config
              vars: {SCRIPTS_DIR: "{{.BUILD_DIR}}/scripts/", OUT_DIR: "{{.BUILD_DIR}}", BASE_FILE: "{{.BUILD_DIR}}/.config", PATCH_FILE: "src/config_mods/config_kernel7plus"}
            - task: make_modulesymvers_if_not_there
            - task: build_xpad
            - task: build_bluetooth
            - task: backup_modules_raspi
              vars: {BCK_DIR: "out/arm/4.9.80-v7+"}
        

    clean:
        desc: remove everything within the 'build'-directory
        cmds:
            - rm --force --recursive build/*

        
    install:
        desc: install the previously builded modules (runs the install.sh script)
        silent: true
        cmds:
            - |
              if [ -f ./out/$(uname -m)/$(uname -r)/install.sh ]
              then
                cd ./out/$(uname -m)/$(uname -r)
                  ./install.sh
              else
                  echo "Please run 'task local' before"
              fi
    
        
    # SHARED SUBROUTINES

    folder_exists:
        cmds:
            - mkdir --parents {{.FOLDER}}
        status:
            - test -d {{.FOLDER}}

    unpack:
        deps:
            - task: folder_exists
              vars: {FOLDER: "{{.BUILD_DIR}}"}
        cmds:
            - tar --totals --extract --ungzip --file={{.FILE}} --directory={{.DEST_DIR}}/ --strip-components=1
        status:
            - test -f {{.DEST_DIR}}/Makefile

    download:
        deps:
            - task: folder_exists
              vars: {FOLDER: "dl"}
        cmds:
            - wget --quiet --timestamping --show-progress --continue {{.LINK}} --directory-prefix={{.DL_DIR}}/
        status:
            - test -f {{.DL_DIR}}/{{base .LINK}}


    bckdir_exists:
        cmds:
            - mkdir --parents {{.BCK_DIR}}
        status:
            - test -d {{.BCK_DIR}}

    backup_modules:
        deps:
            - task: bckdir_exists
              vars: {BCK_DIR: "{{.BCK_DIR}}"}
        cmds:
            - cp --force {{.BUILD_DIR}}/net/bluetooth/bluetooth.ko {{.BCK_DIR}}/
            - cp --force {{.BUILD_DIR}}/drivers/hid/hid.ko {{.BCK_DIR}}/
            - cp --force {{.BUILD_DIR}}/drivers/hid/hid-xpadneo.ko {{.BCK_DIR}}/
            - cp --force src/udev_rules/99-xpadneo.rules {{.BCK_DIR}}/
            - cp --force src/install.sh {{.BCK_DIR}}/

    backup_modules_raspi:
        deps:
            - task: bckdir_exists
              vars: {BCK_DIR: "{{.BCK_DIR}}"}
        cmds:
            - cp --force {{.BUILD_DIR}}/net/bluetooth/bluetooth.ko {{.BCK_DIR}}/
            - cp --force {{.BUILD_DIR}}/drivers/hid/hid-xpadneo.ko {{.BCK_DIR}}/
            - cp --force src/udev_rules/99-xpadneo-raspi.rules {{.BCK_DIR}}/

    make_scripts:
        cmds:
            - make --directory={{.BUILD_DIR}} -j6 scripts
        
    try_copy_modulesymvers_linux_headers:
        cmds:
            - cp --force /lib/modules/{{.K_VER_LONG}}/build/Module.symvers {{.BUILD_DIR}}/
        status:
            - test -f {{.BUILD_DIR}}/Module.symvers
        
    make_modulesymvers_if_not_there:
        cmds:
            - make --directory={{.BUILD_DIR}} -j6 modules
        status:
            - test -f {{.BUILD_DIR}}/Module.symvers

    patch_src:
        cmds:
            - git apply --directory={{.BUILD_DIR}} {{.PATCHES_DIR}}/*.patch
        status:
            - git apply --directory={{.BUILD_DIR}} {{.PATCHES_DIR}}/*.patch -R --check

    copy_config_from_local:
        cmds:
            - |
              if [ -f /boot/config-{{.K_VER}}/.config ] ; then
                  cp /boot/config-{{.K_VER}}/.config {{.BUILD_DIR}}/
              elif [ -f /usr/lib/modules/{{.K_VER_LONG}}/build/.config ] ; then
                  cp /usr/lib/modules/{{.K_VER_LONG}}/build/.config {{.BUILD_DIR}}/
              elif [ -f /proc/config.gz ] ; then
                  gzip --decompress < /proc/config.gz > {{.BUILD_DIR}}/.config
              elif [ -f /boot/config-{{.K_VER_LONG}} ] ; then
                  cp /boot/config-{{.K_VER_LONG}} {{.BUILD_DIR}}/.config
              fi;

    configure_src_from_local:
        cmds:
            - task: copy_config_from_local
              vars: {BUILD_DIR: "{{.BUILD_DIR}}"}
            - task: patch_config
              vars: {SCRIPTS_DIR: "{{.BUILD_DIR}}/scripts/", OUT_DIR: "{{.BUILD_DIR}}", BASE_FILE: "{{.BUILD_DIR}}/.config", PATCH_FILE: "src/config_mods/config_emptyLocalversion"}
            - task: patch_config
              vars: {SCRIPTS_DIR: "{{.BUILD_DIR}}/scripts/", OUT_DIR: "{{.BUILD_DIR}}", BASE_FILE: "{{.BUILD_DIR}}/.config", PATCH_FILE: "src/config_mods/config_setXpadNeo"}
            - task: patch_config
              vars: {SCRIPTS_DIR: "{{.BUILD_DIR}}/scripts/", OUT_DIR: "{{.BUILD_DIR}}", BASE_FILE: "{{.BUILD_DIR}}/.config", PATCH_FILE: "src/config_mods/config_setDebug"}
            - make --directory={{.BUILD_DIR}} -j6 oldconfig
            - make --directory={{.BUILD_DIR}} LOCALVERSION={{.K_VER_LOCAL_EXTRA}} -j6 prepare
        vars:
            K_VER_LONG:
            sh: uname -r
        status:
            - test -f {{.BUILD_DIR}}/.config

    copy_defconfig:
        cmds:
            - cp {{.CONF_PATH}}/{{.CONF_NAME}} {{.BUILD_DIR}}/arch/{{.CONF_ARCH}}/configs/
        status:
            - test -f {{.BUILD_DIR}}/arch/{{.CONF_ARCH}}/configs/{{.CONF_NAME}}

    make_defconfig:
        cmds:
            - make --directory={{.BUILD_DIR}} modules_prepare
            - make --directory={{.BUILD_DIR}} {{.DEFCONFIG}}
            - task: patch_config
              vars: {SCRIPTS_DIR: "{{.BUILD_DIR}}/scripts/", OUT_DIR: "{{.BUILD_DIR}}", BASE_FILE: "{{.BUILD_DIR}}/.config", PATCH_FILE: "src/config_mods/config_setXpadNeo"}
            - task: patch_config
              vars: {SCRIPTS_DIR: "{{.BUILD_DIR}}/scripts/", OUT_DIR: "{{.BUILD_DIR}}", BASE_FILE: "{{.BUILD_DIR}}/.config", PATCH_FILE: "src/config_mods/config_setDebug"}
            - make --directory={{.BUILD_DIR}} -j6 oldconfig
            - make --directory={{.BUILD_DIR}} -j6 prepare
        status:
            - test -f {{.BUILD_DIR}}/.config

    patch_config:
        cmds:
            - ./{{.SCRIPTS_DIR}}/kconfig/merge_config.sh -O {{.OUT_DIR}} -m {{.BASE_FILE}} {{.PATCH_FILE}}
            
    build_xpad:
        sources:
            - ./{{.BUILD_DIR}}/drivers/hid/hid-xpadneo.c
        generates:
            - ./{{.BUILD_DIR}}/drivers/hid/hid-xpadneo.ko
        cmds:
            - make --directory={{.BUILD_DIR}} -j6 M=drivers/hid

    build_bluetooth:
        sources:
            - ./{{.BUILD_DIR}}/net/bluetooth/l2cap_core.c
        generates:
            - ./{{.BUILD_DIR}}/net/bluetooth/bluetooth.ko
        cmds:
            - make --directory={{.BUILD_DIR}} -j6 M=net/bluetooth

    build_hid:
        sources:
            - ./{{.BUILD_DIR}}/drivers/hid/hid-core.c
        generates:
            - ./{{.BUILD_DIR}}/drivers/hid/hid.ko
        cmds:
            - make --directory={{.BUILD_DIR}} -j6 M=drivers/hid

    copy_driver:
        sources:
            - src/hid-xpadneo.c
        generates:
            - ./{{.BUILD_DIR}}/drivers/hid/hid-xpadneo.c
        cmds:
            - cp -al --force src/hid-xpadneo.c {{.BUILD_DIR}}/drivers/hid/

    zip:
        sources:
            - ./{{.BUILD_DIR}}/{{.REL_FILE_PATH}}
        generates:
            - ./{{.BUILD_DIR}}/{{.REL_FILE_PATH}}.xz
        cmds:
            - xz --keep {{.BUILD_DIR}}/{{.REL_FILE_PATH}}
